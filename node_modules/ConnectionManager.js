var Utils = require("./Utils"),
    request = require("request");

class ConnectionManager {
    constructor(app) {
        this.app = app;
        this.utils = new Utils();
        app.get("/countries/", this.getCountryList.bind(this));
        app.get("/competitions/", this.getAllCompetitions.bind(this));
        app.get("/competition/:idcompetition/results", this.getCompetitionResults.bind(this));
        app.get("/competition/:idcompetition/rankings", this.getCompetitionRankings.bind(this));
        app.get("/competition/:idcompetition", this.getCompetitionInfo.bind(this));
        app.get("/teams/:teamid/roster", this.getTeamRoster.bind(this));
        app.get("/teams/:teamid", this.getTeamInfo.bind(this));
        app.get("/player/:teamid/:playerid", this.getPlayerInfo.bind(this)); // Récupérer l'effectif puis prendre les infos de l'id du joueur
        
    }
    
    getCountryList(req, res) {
        
        let countries = this.utils.getCountryList();
        
        res.send(countries);
    }
    
    getAllCompetitions(req, res) {
        let url = this.utils.generateRequest({request_type: "competitions"});
        return this.getData(url).then((data) => {
           for(let elem of data) {
               elem.country_id = this.utils.getCountryClass(elem.league); // We get the competition's country and insert it into the JSON response
            }
           res.send(data); 
        });
        
    }
    getCompetitionResults(req, res) {
        let url = this.utils.generateRequest({request_type: "results", competition_id: req.params.idcompetition});
        
    
        return this.getData(url).then((data) => {
            //console.log(data);
           res.send(data); 
        }).catch((err) => {
            this.handleError(err, res);
            throw err;
        });
        
    }
    
    getCompetitionRankings(req, res) {
        let url = this.utils.generateRequest({request_type: "ranking", competition_id: req.params.idcompetition});

        return this.getData(url).then((data) => {
            //console.log(data);
           res.send(data); 
        }).catch((err) => {
            this.handleError(err, res);
            console.log("Erreur classement compétition");
            throw err;
            
            
        });
    }
    
    
    getTeamRoster(req, res) {
        
        let url = this.utils.generateRequest({request_type: "team_roster", "team_id": req.params.teamid});
        
        return this.getData(url).then((data) => {
            res.send(data);
        }).catch((err) => {
            this.handleError(err, res);
            
            throw err;
            
        });
        
        res.end();
        
    }
    
    getTeamInfo(req, res) {

        let url = this.utils.generateRequest({request_type: "team_info", team_id: req.params.teamid});
        
        return this.getData(url).then((data) => {
            res.send(data);
            
        }).catch((err) => {
            this.handleError(err, res);
            throw err;
        })
        
    }
    
    getPlayerInfo(req, res) {

        res.end();
        
    }
    
    getCompetitionInfo(req, res) {
        console.log("Compétition appel");
        let url = this.utils.generateRequest({request_type: "competition_info", competition_id: req.params.idcompetition});
        console.log(url);
        return this.getData(url).then((data) => {
            res.send(data);
        });
    }
    
    getData(url) {
        return new Promise((resolve, reject) => {
            request.get({
                url:url,
                json:true,
                headers: { "X-Auth-Token": process.env.FOOTBALLAPIKEY }
            }, (err, response, data) => {
                if(response.statusCode !== 200) {
                
                    reject(response.statusCode);
                } else {
                    resolve(data);    
                }
 
                
            });
        });
    }
    
    
    
    handleError(err_code, res) {
        res.send({error: err_code});
    }
}

module.exports = ConnectionManager;
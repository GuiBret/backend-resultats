var Utils = require("./Utils"),
    request = require("request");

class ConnectionManager {
    constructor(app) {
        this.app = app;
        this.utils = new Utils();
        app.get("/countries/", this.getCountryList.bind(this));
        app.get("/competitions/", this.getAllCompetitions.bind(this));
        app.get("/competition/:idcompetition/results", this.getCompetitionResults.bind(this));
        app.get("/competition/:idcompetition/rankings", this.getCompetitionRankings.bind(this));
        app.get("/competition/:idcompetition", this.getCompetitionInfo.bind(this));
        app.get("/teams/:teamid/roster", this.getTeamRoster.bind(this));
        app.get("/teams/:teamid", this.getTeamInfo.bind(this));
        app.get("/player/:teamid/:playerid", this.getPlayerInfo.bind(this)) // Récupérer l'effectif puis prendre les infos de l'id du joueur
           .get("/country-competitions/:countryid", this.getCompetitionsByCountry.bind(this));
        
    }
    
    getCountryList(req, res) {
        
        let countries = this.utils.getCountryList();
        
        res.send(countries);
    }
    
    getAllCompetitions(req, res) {
        let url = this.utils.generateRequest({request_type: "competitions"});
        return this.getData(url).then((data) => {

           for(let elem of data) {
               elem.country_id = this.utils.getCountryClass(elem.league); // We get the competition's country and insert it into the JSON response
            }
           res.send(data); 
        });
        
    }
    getCompetitionResults(req, res) {
        let url = this.utils.generateRequest({request_type: "results", competition_id: req.params.idcompetition});
        
    
        return this.getData(url).then((data) => {
           res.send(data); 
        }).catch((err) => {
            this.handleError(err, res);
            throw err;
        });
        
    }
    
    getCompetitionRankings(req, res) {
        let url = this.utils.generateRequest({request_type: "ranking", competition_id: req.params.idcompetition});

        return this.getData(url).then((data) => {
           var qualifplaces = this.utils.getQualificationPlaces(req.params.idcompetition);
            
            for(let team of data.standing) {

                
                // TODO : find a better way of dealing with this (check Utils as well)
               if(team.position === 1) {
                   team.seasonend = "champion";
                   
               } else if(qualifplaces.c1.indexOf(team.position) !== -1) {
                   team.seasonend = "c1";
               } else if(qualifplaces.c3.indexOf(team.position) !== -1) {
                   team.seasonend = "c3";
               } else if(qualifplaces.relegation.indexOf(team.position) !== -1) {
                   team.seasonend = "relegation";
               } else if(qualifplaces.promotion.indexOf(team.position) !== -1) {
                   team.seasonend = "promotion";
               } else if(qualifplaces.playoffsup.indexOf(team.position) !== -1) {
                   team.seasonend = "playoffsup";
               } else if (qualifplaces.playoffsdown.indexOf(team.position) !== -1) {
                   team.seasonend = "playoffsdown";
               }else {
                   team.seasonend="normal";
               }
                
                
            }
            
           res.send(data); 
        }).catch((err) => {
            this.handleError(err, res);
            console.log("Erreur classement compétition");
            throw err;
            
            
        });
    }
    
    
    getTeamRoster(req, res) {
        
        let url = this.utils.generateRequest({request_type: "team_roster", "team_id": req.params.teamid});
        
        return this.getData(url).then((data) => {
            res.send(data);
        }).catch((err) => {
            this.handleError(err, res);
            
            throw err;
            
        });
        
        res.end();
        
    }
    
    getTeamInfo(req, res) {

        let url = this.utils.generateRequest({request_type: "team_info", team_id: req.params.teamid});
        
        return this.getData(url).then((data) => {
            res.send(data);
            
        }).catch((err) => {
            this.handleError(err, res);
            throw err;
        })
        
    }
    
    getPlayerInfo(req, res) {

        res.end();
        
    }
    
    getCompetitionInfo(req, res) {

        let url = this.utils.generateRequest({request_type: "competition_info", competition_id: req.params.idcompetition});

        return this.getData(url).then((data) => {
            data.country_id = this.utils.getCountryClass(data.league)
            res.send(data);
        });
    }
    
    getData(url) {
        return new Promise((resolve, reject) => {
            request.get({
                url:url,
                json:true,
                headers: { "X-Auth-Token": process.env.FOOTBALLAPIKEY }
            }, (err, response, data) => {
                if(response.statusCode !== 200) {
                
                    reject(response.statusCode);
                } else {
                    resolve(data);    
                }
 
                
            });
        });
    }
    
    getCompetitionsByCountry(req, res) {
        return new Promise((resolve, reject) => {
            let competition_ids = this.utils.getCompetitionsById(req.params.countryid);
            let url = this.utils.generateRequest({"request_type": "competitions"});
            this.getData(url).then((res) => {
                let competitions = [];
                for(let competition of res) {
                    if(competition_ids.indexOf(competition.id) !== -1) {
                        competitions.push(competition);
                    }
                }
                
                resolve(competitions);
                  
                  
            });
        });
    }
    
    
    handleError(err_code, res) {
        res.send({error: err_code});
    }
}

module.exports = ConnectionManager;